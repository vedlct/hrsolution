{"remainingRequest":"C:\\xampp\\htdocs\\hrsolution\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\xampp\\htdocs\\hrsolution\\frontend\\node_modules\\@ng-bootstrap\\ng-bootstrap\\modal\\modal-ref.js","dependencies":[{"path":"C:\\xampp\\htdocs\\hrsolution\\frontend\\node_modules\\@ng-bootstrap\\ng-bootstrap\\modal\\modal-ref.js","mtime":1540630944600},{"path":"C:\\xampp\\htdocs\\hrsolution\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540630948252},{"path":"C:\\xampp\\htdocs\\hrsolution\\frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1540630936396}],"contextDependencies":[],"result":["/**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nvar /**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nNgbActiveModal = /** @class */ (function () {\r\n    function NgbActiveModal() {\r\n    }\r\n    /**\r\n     * Can be used to close a modal, passing an optional result.\r\n     */\r\n    /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    NgbActiveModal.prototype.close = /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    function (result) { };\r\n    /**\r\n     * Can be used to dismiss a modal, passing an optional reason.\r\n     */\r\n    /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    NgbActiveModal.prototype.dismiss = /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    function (reason) { };\r\n    return NgbActiveModal;\r\n}());\r\n/**\r\n * A reference to an active (currently opened) modal. Instances of this class\r\n * can be injected into components passed as modal content.\r\n */\r\nexport { NgbActiveModal };\r\n/**\r\n * A reference to a newly opened modal.\r\n */\r\nvar /**\r\n * A reference to a newly opened modal.\r\n */\r\nNgbModalRef = /** @class */ (function () {\r\n    function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\r\n        var _this = this;\r\n        this._windowCmptRef = _windowCmptRef;\r\n        this._contentRef = _contentRef;\r\n        this._backdropCmptRef = _backdropCmptRef;\r\n        this._beforeDismiss = _beforeDismiss;\r\n        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });\r\n        this.result = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n            _this._reject = reject;\r\n        });\r\n        this.result.then(null, function () { });\r\n    }\r\n    Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\r\n        /**\r\n         * The instance of component used as modal's content.\r\n         * Undefined when a TemplateRef is used as modal's content.\r\n         */\r\n        get: /**\r\n           * The instance of component used as modal's content.\r\n           * Undefined when a TemplateRef is used as modal's content.\r\n           */\r\n        function () {\r\n            if (this._contentRef.componentRef) {\r\n                return this._contentRef.componentRef.instance;\r\n            }\r\n        },\r\n        // only needed to keep TS1.8 compatibility\r\n        set: \r\n        // only needed to keep TS1.8 compatibility\r\n        function (instance) { },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Can be used to close a modal, passing an optional result.\r\n     */\r\n    /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    NgbModalRef.prototype.close = /**\r\n       * Can be used to close a modal, passing an optional result.\r\n       */\r\n    function (result) {\r\n        if (this._windowCmptRef) {\r\n            this._resolve(result);\r\n            this._removeModalElements();\r\n        }\r\n    };\r\n    NgbModalRef.prototype._dismiss = function (reason) {\r\n        this._reject(reason);\r\n        this._removeModalElements();\r\n    };\r\n    /**\r\n     * Can be used to dismiss a modal, passing an optional reason.\r\n     */\r\n    /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    NgbModalRef.prototype.dismiss = /**\r\n       * Can be used to dismiss a modal, passing an optional reason.\r\n       */\r\n    function (reason) {\r\n        var _this = this;\r\n        if (this._windowCmptRef) {\r\n            if (!this._beforeDismiss) {\r\n                this._dismiss(reason);\r\n            }\r\n            else {\r\n                var dismiss = this._beforeDismiss();\r\n                if (dismiss && dismiss.then) {\r\n                    dismiss.then(function (result) {\r\n                        if (result !== false) {\r\n                            _this._dismiss(reason);\r\n                        }\r\n                    }, function () { });\r\n                }\r\n                else if (dismiss !== false) {\r\n                    this._dismiss(reason);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    NgbModalRef.prototype._removeModalElements = function () {\r\n        var windowNativeEl = this._windowCmptRef.location.nativeElement;\r\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\r\n        this._windowCmptRef.destroy();\r\n        if (this._backdropCmptRef) {\r\n            var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\r\n            backdropNativeEl.parentNode.removeChild(backdropNativeEl);\r\n            this._backdropCmptRef.destroy();\r\n        }\r\n        if (this._contentRef && this._contentRef.viewRef) {\r\n            this._contentRef.viewRef.destroy();\r\n        }\r\n        this._windowCmptRef = null;\r\n        this._backdropCmptRef = null;\r\n        this._contentRef = null;\r\n    };\r\n    return NgbModalRef;\r\n}());\r\n/**\r\n * A reference to a newly opened modal.\r\n */\r\nexport { NgbModalRef };\r\n//# sourceMappingURL=modal-ref.js.map",null]}